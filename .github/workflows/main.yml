name: Upload Files to S3

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  upload:
    name: Upload to AWS S3
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Change this to your desired AWS region

      # Step 3: Upload files to S3 while maintaining folder structure
      - name: Upload files to S3
        run: |
          aws s3 sync . s3://config-files123/fhir/ \
            --exclude ".git/*" \
            --exclude ".github/*" \
            --exclude "README.md" \
            --delete
# Step 4: Detect changed CloudFormation templates
      - name: Detect changed templates
        id: detect_changes
        run: |
          git fetch origin main
          # Detect files changed in the last commit and filter only CloudFormation files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E 'config_files/fhir/.*/CFT/.*\.(ya?ml|json|cft)$' || true)
          echo "Changed templates:"
          echo "$CHANGED_FILES"
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_ENV
          
# Step 5: Validate each template before deploying
      - name: Validate CloudFormation templates
        if: env.changed_files != ''
        run: |
          for file in ${{ env.changed_files }}; do
            echo "Validating $file..."
            aws cloudformation validate-template --template-body file://$file || exit 1
          done

      # Step 6: Deploy updated CloudFormation stacks
      - name: Deploy CloudFormation stacks
        if: env.changed_files != ''
        run: |
          for file in ${{ env.changed_files }}; do
            stack_name=$(basename "$file" | sed 's/\.[^.]*$//')  # stack name = filename without extension
            echo "Deploying stack: $stack_name"
            aws cloudformation deploy \
              --stack-name "$stack_name" \
              --template-file "$file" \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
              --no-fail-on-empty-changeset
          done      
