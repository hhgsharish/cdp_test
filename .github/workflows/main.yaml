
name: Upload, Deploy and Rollback CloudFormation Stack with new or existing resources.

on:
  push:
    branches: 
      - main

  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  S3_BUCKET: config-files123
  CFT_BACKUP_PREFIX: backup/cloudformation

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC authentication with AWS
      contents: read    # Required to checkout the repository
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch last 2 commits to detect changes
      
      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Change this to your desired AWS region

      # Step 4: Sync Repository to S3 (Incremental)
      # Uses --size-only and --delete flags for efficient syncing
      #--delete flag removes files from S3 that no longer exist in the repo
      - name: Sync Changed Files to S3
        run: |
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Starting incremental sync to S3..."
          aws s3 sync . s3://${{ env.S3_BUCKET }}/${BRANCH_NAME}/ \
            --exclude ".git/*" \
            --exclude ".github/*" \
            --exclude "*.md" \
            --exclude ".gitignore" \
            --size-only
          echo "Sync completed successfully"

      # Step 5: Detect Changed CloudFormation Templates
      - name: Detect Changed CFT Files
        id: detect-cft
        run: |
          echo "Detecting CloudFormation template changes..."
          
          # Get list of changed CFT files (YAML and JSON)
            # Manual trigger: check all CFT files
            CHANGED_FILES=$(find . -type f \( -name "*.yaml" -o -name "*.yml" -o -name "*.json" \) -path "*/CFT/*" | sed 's|^\./||')
            # Push event: detect changes between commits
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No CloudFormation template changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed CFT files detected:"
            echo "$CHANGED_FILES"
            echo "$CHANGED_FILES" > /tmp/changed_cft_files.txt
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi        

     # Step 6: Process CloudFormation Templates
      - name: Deploy/Update CloudFormation Stacks
        if: steps.detect-cft.outputs.has_changes == 'true'
        run: |
          echo "Processing CloudFormation templates..."
          
          while IFS= read -r file; do
            if [ -z "$file" ]; then
              continue
            fi
            
            echo "----------------------------------------"
            echo "Processing: $file"
            
            # Extract stack name from file path
            # Example: Folder1/CFT/vpc.yaml -> folder1-vpc
            FOLDER=$(echo "$file" | cut -d'/' -f1 | tr '[:upper:]' '[:lower:]')
            FILENAME=$(basename "$file" | sed 's/\.[^.]*$//')
            STACK_NAME="${FOLDER}-${FILENAME}"
            
            # S3 path for the template
            S3_TEMPLATE_URL="https://s3.${{ env.AWS_REGION }}.amazonaws.com/${{ env.S3_BUCKET }}/$file"
            
            # Check if stack exists
            if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
              echo "Stack '$STACK_NAME' exists - Preparing update..."
              
              # Backup current template before update
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              BACKUP_KEY="${{ env.CFT_BACKUP_PREFIX }}/$STACK_NAME/$TIMESTAMP-$(basename $file)"
              
              echo "Creating backup of current template..."
              aws cloudformation get-template \
                --stack-name "$STACK_NAME" \
                --query 'TemplateBody' \
                --output text > /tmp/current_template.yaml
              
              aws s3 cp /tmp/current_template.yaml "s3://${{ env.S3_BUCKET }}/$BACKUP_KEY"
              echo "✓ Backup saved to: s3://${{ env.S3_BUCKET }}/$BACKUP_KEY"
              
              # Attempt stack update
              echo "Updating stack '$STACK_NAME'..."
              UPDATE_OUTPUT=$(aws cloudformation update-stack \
                --stack-name "$STACK_NAME" \
                --template-url "$S3_TEMPLATE_URL" \
                --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
                --region ${{ env.AWS_REGION }} 2>&1) || UPDATE_FAILED=true
              
              if [ "$UPDATE_FAILED" = true ]; then
                if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
                  echo "ℹ No updates required for stack '$STACK_NAME'"
                else
                  echo "❌ Stack update failed: $UPDATE_OUTPUT"
                  echo "Initiating rollback to previous version..."
                  
                  # Rollback to backup template
                  aws cloudformation update-stack \
                    --stack-name "$STACK_NAME" \
                    --template-body "file:///tmp/current_template.yaml" \
                    --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
                    --region ${{ env.AWS_REGION }}
                  
                  echo "⚠ Rollback initiated for stack '$STACK_NAME'"
                  
                  # Wait for rollback to complete
                  aws cloudformation wait stack-update-complete \
                    --stack-name "$STACK_NAME" \
                    --region ${{ env.AWS_REGION }} || true
                  
                  echo "❌ Stack '$STACK_NAME' rolled back to previous version"
                  exit 1
                fi
              else
                echo "✓ Stack update initiated for '$STACK_NAME'"
                
                # Wait for update to complete
                echo "Waiting for stack update to complete..."
                aws cloudformation wait stack-update-complete \
                  --stack-name "$STACK_NAME" \
                  --region ${{ env.AWS_REGION }}
                
                echo "✓ Stack '$STACK_NAME' updated successfully"
              fi
              
            else
              echo "Stack '$STACK_NAME' does not exist - Creating new stack..."
              
              # Create new stack
              aws cloudformation create-stack \
                --stack-name "$STACK_NAME" \
                --template-body "file://$file" \
                --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
                --region ${{ env.AWS_REGION }}
              
              echo "✓ Stack creation initiated for '$STACK_NAME'"
              
              # Wait for creation to complete
              echo "Waiting for stack creation to complete..."
              aws cloudformation wait stack-create-complete \
                --stack-name "$STACK_NAME" \
                --region ${{ env.AWS_REGION }}
              
              echo "✓ Stack '$STACK_NAME' created successfully"
            fi
            
          done < /tmp/changed_cft_files.txt
          
          echo "----------------------------------------"
          echo "✓ All CloudFormation operations completed"

      # Step 7: Summary
      - name: Deployment Summary
        if: always()
        run: |
          echo "========================================="
          echo "Deployment Summary"
          echo "========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Region: ${{ env.AWS_REGION }}"
          echo "S3 Bucket: s3://${{ env.S3_BUCKET }}"
          echo "========================================="          
